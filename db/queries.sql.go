// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createMeta = `-- name: CreateMeta :one
INSERT INTO metas (
  post_id, slug, title, summary, group_name, tags
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING post_id, slug, title, summary, group_name, tags, post_time
`

type CreateMetaParams struct {
	PostID    int64
	Slug      string
	Title     string
	Summary   string
	GroupName sql.NullString
	Tags      []string
}

func (q *Queries) CreateMeta(ctx context.Context, arg CreateMetaParams) (Meta, error) {
	row := q.db.QueryRowContext(ctx, createMeta,
		arg.PostID,
		arg.Slug,
		arg.Title,
		arg.Summary,
		arg.GroupName,
		pq.Array(arg.Tags),
	)
	var i Meta
	err := row.Scan(
		&i.PostID,
		&i.Slug,
		&i.Title,
		&i.Summary,
		&i.GroupName,
		pq.Array(&i.Tags),
		&i.PostTime,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (content) VALUES ($1)
RETURNING id
`

func (q *Queries) CreatePost(ctx context.Context, content string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPost, content)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, content, post_id, slug, title, summary, group_name, tags, post_time FROM posts, metas
WHERE
  id = post_id AND
  slug = $1
`

type GetPostBySlugRow struct {
	ID        int64
	Content   string
	PostID    int64
	Slug      string
	Title     string
	Summary   string
	GroupName sql.NullString
	Tags      []string
	PostTime  time.Time
}

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (GetPostBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i GetPostBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.Slug,
		&i.Title,
		&i.Summary,
		&i.GroupName,
		pq.Array(&i.Tags),
		&i.PostTime,
	)
	return i, err
}

const listMetas = `-- name: ListMetas :many
SELECT post_id, slug, title, summary, group_name, tags, post_time FROM metas
`

func (q *Queries) ListMetas(ctx context.Context) ([]Meta, error) {
	rows, err := q.db.QueryContext(ctx, listMetas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meta
	for rows.Next() {
		var i Meta
		if err := rows.Scan(
			&i.PostID,
			&i.Slug,
			&i.Title,
			&i.Summary,
			&i.GroupName,
			pq.Array(&i.Tags),
			&i.PostTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tablesExists = `-- name: TablesExists :one
SELECT EXISTS (
  SELECT FROM pg_tables
  WHERE
  	schemaname = 'public' AND
  	tablename = 'posts'
)
`

func (q *Queries) TablesExists(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, tablesExists)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
